@model CheckoutViewModel
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Checkout";
}

<div class="container py-5" style="padding-top: 120px !important;">
    <h1 class="mb-4">Secure Checkout</h1>
    <form asp-action="PlaceOrder" method="post" id="checkout-form">
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col-md-7">
                <div class="card shadow-sm mb-4">
                    <div class="card-body">
                        <h4 class="card-title mb-4">Shipping Information</h4>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label asp-for="FirstName" class="form-label"></label>
                                <input asp-for="FirstName" class="form-control" required />
                                <span asp-validation-for="FirstName" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="LastName" class="form-label"></label>
                                <input asp-for="LastName" class="form-control" required />
                                <span asp-validation-for="LastName" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="Email" class="form-label"></label>
                                <input asp-for="Email" class="form-control" required />
                                <span asp-validation-for="Email" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="PhoneNumber" class="form-label"></label>
                                <input asp-for="PhoneNumber" class="form-control" required />
                                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                            </div>
                            <div class="col-12">
                                <label asp-for="ShippingAddress" class="form-label"></label>
                                <textarea asp-for="ShippingAddress" class="form-control" rows="2" required></textarea>
                                <span asp-validation-for="ShippingAddress" class="text-danger"></span>
                            </div>
                            <div class="col-12">
                                <label asp-for="ShippingZoneId" class="form-label"></label>
                                <select asp-for="ShippingZoneId" asp-items="@(new SelectList(Model.ShippingZones, "Id", "ZoneName"))" class="form-select" required>
                                    <option value="">-- Select a Shipping Zone --</option>
                                </select>
                                <span asp-validation-for="ShippingZoneId" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h4 class="card-title mb-4">Payment Method</h4>
                        <div class="list-group" id="payment-method-options">
                            <label class="list-group-item d-flex gap-2">
                                <input class="form-check-input flex-shrink-0" type="radio" name="paymentMethodRadio" value="Stripe" checked>
                                <span>
                                    Pay with Card (Stripe)
                                    <small class="d-block text-muted">Secure payment with your credit or debit card.</small>
                                </span>
                            </label>
                            <label class="list-group-item d-flex gap-2">
                                <input class="form-check-input flex-shrink-0" type="radio" name="paymentMethodRadio" value="PayPal">
                                <span>
                                    Pay with PayPal
                                    <small class="d-block text-muted">Use your PayPal account for a fast and secure checkout.</small>
                                </span>
                            </label>
                            <label class="list-group-item d-flex gap-2">
                                <input class="form-check-input flex-shrink-0" type="radio" name="paymentMethodRadio" value="CashOnDelivery">
                                <span>
                                    Pay on Delivery
                                    <small class="d-block text-muted">Pay with cash when your order arrives.</small>
                                </span>
                            </label>
                        </div>
                        <input type="hidden" asp-for="PaymentMethod" />
                        <div id="payment-buttons" class="mt-4">
                            <div id="paypal-button-container" style="display: none;"></div>
                            <button id="stripe-checkout-button" type="button" class="btn btn-primary w-100"><i class="fab fa-stripe me-2"></i>Pay with Card</button>
                            <button id="cod-submit-button" type="submit" class="btn btn-secondary w-100" style="display: none;">Place Order (Pay on Delivery)</button>
                        </div>
                        <div id="payment-message" class="alert mt-3" style="display: none;"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-5">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h4 class="card-title mb-4">Order Summary</h4>
                        @foreach (var item in Model.Cart.CartItems)
                        {
                            var itemName = item.Product?.Name ?? item.Course?.Name;
                            var itemPrice = (item.Price * item.Quantity).ToString("C");
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span>@itemName (x@item.Quantity)</span>
                                <strong>@itemPrice</strong>
                            </div>
                        }
                        <hr />
                        <div class="d-flex justify-content-between">
                            <span>Subtotal</span>
                            <strong id="subtotal">@Model.Cart.Subtotal.ToString("C")</strong>
                        </div>
                        <div class="d-flex justify-content-between">
                            <span>Delivery</span>
                            <strong id="shipping-cost">$0.00</strong>
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between fs-5 fw-bold">
                            <span>Total</span>
                            <span id="total-cost">@Model.Cart.Subtotal.ToString("C")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script src="https://www.paypal.com/sdk/js?client-id=@Model.PayPalClientId&currency=USD"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const shippingZoneSelect = document.getElementById('ShippingZoneId');
            const subtotal = parseFloat('@Model.Cart.Subtotal');
            const shippingCostEl = document.getElementById('shipping-cost');
            const totalCostEl = document.getElementById('total-cost');
            const checkoutForm = document.getElementById('checkout-form');
            const paymentMessage = document.getElementById('payment-message');

            const paymentRadios = document.querySelectorAll('input[name="paymentMethodRadio"]');
            const stripeBtn = document.getElementById('stripe-checkout-button');
            const paypalContainer = document.getElementById('paypal-button-container');
            const codBtn = document.getElementById('cod-submit-button');
            const paymentMethodInput = document.getElementById('PaymentMethod');

            function togglePaymentButtons() {
                const selected = document.querySelector('input[name="paymentMethodRadio"]:checked').value;

                stripeBtn.style.display = 'none';
                paypalContainer.style.display = 'none';
                codBtn.style.display = 'none';

                if (selected === 'Stripe') stripeBtn.style.display = 'block';
                else if (selected === 'PayPal') paypalContainer.style.display = 'block';
                else if (selected === 'CashOnDelivery') codBtn.style.display = 'block';

                paymentMethodInput.value = selected;
            }

            paymentRadios.forEach(radio => radio.addEventListener('change', togglePaymentButtons));
            togglePaymentButtons();

            async function updateCosts() {
                 const zoneId = shippingZoneSelect.value;
                 let cost = 0;
                 if (zoneId) {
                     try {
                         const response = await fetch(`/api/checkout/shippingcost/${zoneId}`);
                         if (!response.ok) throw new Error('Failed to fetch shipping cost');
                         const data = await response.json();
                         cost = parseFloat(data.cost);
                     } catch (error) { console.error(error); }
                 }
                 shippingCostEl.textContent = `$${cost.toFixed(2)}`;
                 totalCostEl.textContent = `$${(subtotal + cost).toFixed(2)}`;
            }

            shippingZoneSelect.addEventListener('change', updateCosts);
            if(shippingZoneSelect.value) updateCosts();

            function getFormData() {
                return {
                    shippingZoneId: parseInt(shippingZoneSelect.value) || null,
                    shippingAddress: document.getElementById('ShippingAddress').value,
                    phoneNumber: document.getElementById('PhoneNumber').value,
                };
            }

            function showMessage(message, isError = true) {
                paymentMessage.textContent = message;
                paymentMessage.className = isError ? 'alert alert-danger mt-3' : 'alert alert-info mt-3';
                paymentMessage.style.display = 'block';
            }

            // Stripe Integration
            const stripe = Stripe('@Configuration["Stripe:PublishableKey"]');
            if(stripeBtn) {
                stripeBtn.addEventListener('click', function() {
                    if (!checkoutForm.checkValidity()) {
                       checkoutForm.reportValidity();
                       return;
                    }
                    fetch('/api/checkout/create-stripe-session', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(getFormData())
                    })
                    .then(response => {
                        if (!response.ok) return response.json().then(err => Promise.reject(err));
                        return response.json();
                    })
                    .then(session => stripe.redirectToCheckout({ sessionId: session.sessionId }))
                    .catch(error => {
                        console.error('Stripe Error:', error);
                        showMessage(error.error?.message || 'Could not connect to Stripe. Please check API keys.');
                    });
                });
            }

            // PayPal Integration
            if (typeof paypal !== 'undefined' && '@Model.PayPalClientId' && '@Model.PayPalClientId' !== 'YOUR_PAYPAL_CLIENT_ID') {
                 paypal.Buttons({
                    onClick: (data, actions) => {
                        if (!checkoutForm.checkValidity()) {
                           checkoutForm.reportValidity();
                           showMessage('Please fill in all required shipping details.');
                           return actions.reject();
                        }
                        return actions.resolve();
                    },
                    createOrder: () => {
                        return fetch('/api/checkout/create-paypal-order', {
                            method: 'post',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(getFormData())
                        }).then(res => {
                            if (!res.ok) return res.json().then(err => Promise.reject(err));
                            return res.json();
                        }).then(orderData => orderData.id)
                        .catch(error => {
                             showMessage(error.error?.message || 'Could not create PayPal order.');
                        });
                    },
                    onApprove: (data) => {
                         return fetch('/api/checkout/capture-paypal-order', {
                            method: 'post',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ orderId: data.orderID, ...getFormData() })
                        }).then(res => res.json()).then(orderData => {
                            if (orderData.success) {
                                window.location.href = '/Checkout/Success';
                            } else { throw new Error(orderData.message || 'Payment capture failed.'); }
                        });
                    },
                    onError: (err) => {
                        showMessage('An error occurred during the PayPal transaction.');
                        console.error('PayPal Error:', err);
                    }
                }).render('#paypal-button-container');
            } else {
                 console.warn("PayPal SDK not loaded. Is the Client ID in appsettings.json correct or missing?");
                 if(paypalContainer) {
                    paypalContainer.innerHTML = '<p class="text-center text-muted small">PayPal is currently unavailable.</p>';
                 }
            }
        });
    </script>
}

